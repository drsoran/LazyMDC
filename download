#!venv/bin/python

import sys
import imgkit
import io
import json
import os
import pdfkit
import re
import urllib

from PIL import Image

from zipfile import ZipFile

RE_KB = re.compile(r'^[0-9a-zA-Z-]+$')
RE_INT = re.compile(r'^[0-9]+$')

PNG_WIDTH = 800
PNG_HEIGHT = 1200

qs = urllib.parse.parse_qs(os.environ.get('QUERY_STRING', ""))

if (
        "kb" not in qs or "pages" not in qs or "id" not in qs
        or not RE_KB.match(qs['kb'][0])
        or not RE_KB.match(qs['id'][0])
        or not RE_INT.match(qs['pages'][0])):

    print("Content-Type: text/html")
    print("Status: 400 Bad Request\n")
    sys.exit(0)


kb = qs['kb'][0]
output = qs.get('output', ['png'])[0]
mission = qs['id'][0]
pages = int(qs['pages'][0])

file_path = "mdcs_html/%s.html" % kb

if not os.path.exists(file_path):
    print("Content-Type: text/html")
    print("Status: 400 Bad Request\n")
    sys.exit(0)

if output.startswith("png"):

    full_page = io.BytesIO(imgkit.from_file(
        file_path, None,
        options={
            "enable-local-file-access": "",
            "quiet": "",
            "format": "png",
            "quality": 100,
            "width": PNG_WIDTH,
            "height": PNG_HEIGHT*pages,
            "disable-smart-width": "",
        }))

    im1 = Image.open(full_page)

    # Single Page ?
    if pages == 1 or output == "png1":
        f = io.BytesIO()
        im1.save(f, "PNG")
        f.seek(0)

        print("Content-Type: image/png\n")
        sys.stdout.flush()
        sys.stdout.buffer.write(f.read())
        sys.exit(0)
    else:
        # Zip up each page
        zipfd = io.BytesIO()
        zipf = ZipFile(zipfd, 'w')

        # Crop out pages
        for x in range(pages):
            cr = im1.crop((0, PNG_HEIGHT * x, PNG_WIDTH, PNG_HEIGHT * (x+1)))
            f = io.BytesIO()
            cr.save(f, "PNG")
            f.seek(0)
            zipf.writestr('0000-%s-%03d.png' % (mission, x+1), f.read())

        zipf.close()
        zipfd.seek(0)

        print ("Content-Disposition: attachment; "
               "filename=\"MDC-%s.zip\"" % mission)
        print ("Content-Type: application/zip\n")
        sys.stdout.flush()
        sys.stdout.buffer.write(zipfd.read())
        sys.exit(0)

#  page = 1
#  im1 = Image.open(full_page)
#  cr2 = im1.crop((0, PNG_HEIGHT*(page-1), PNG_WIDTH, PNG_HEIGHT*(page)))
#
#  f = io.BytesIO()
#  cr2.save(f, "PNG")
#  f.seek(0)
#
#
#print("Content-Type: text/plain\n")
#print(file_path)
#print(output)
#print(data['pages'])
